From f2056e43e85e25b57eb83ef46e84c739e068b28d Mon Sep 17 00:00:00 2001
From: Shareef Ali <shareefalis@cyanogenmod.org>
Date: Thu, 2 Jan 2014 19:11:57 -0600
Subject: [PATCH] hal: add custom platform abstraction

Change-Id: I7ce4a1b05e8957b43581242ec7e6f21f0ad900aa
---
 hal/Android.mk                            |    9 ++++-
 hal/msm8974/platform.c                    |   53 ++++++++++-------------------
 hal/msm8974/platform.h                    |   37 ++++++++++++++++++++
 hal/vendor-platform/Custom-Platform_Api.h |   29 ++++++++++++++++
 hal/vendor-platform/customplatform.c      |   25 ++++++++++++++
 5 files changed, 117 insertions(+), 36 deletions(-)
 create mode 100644 hal/vendor-platform/Custom-Platform_Api.h
 create mode 100644 hal/vendor-platform/customplatform.c

diff --git a/hal/Android.mk b/hal/Android.mk
index d4862f2..83a4b09 100644
--- a/hal/Android.mk
+++ b/hal/Android.mk
@@ -28,6 +28,12 @@ LOCAL_SRC_FILES := \
 	voice.c \
 	$(AUDIO_PLATFORM)/platform.c
 
+ifneq ($(BOARD_USES_CUSTOM_AUDIO_PLATFORM_PATH),)
+    LOCAL_SRC_FILES += ../../../../$(BOARD_USES_CUSTOM_AUDIO_PLATFORM_PATH)/customplatform.c
+else
+    LOCAL_SRC_FILES += vendor-platform/customplatform.c
+endif
+
 LOCAL_SRC_FILES += audio_extn/audio_extn.c
 
 ifneq ($(strip $(AUDIO_FEATURE_DISABLED_ANC_HEADSET)),true)
@@ -127,7 +133,8 @@ LOCAL_C_INCLUDES += \
 	$(call include-path-for, audio-effects) \
 	$(LOCAL_PATH)/$(AUDIO_PLATFORM) \
 	$(LOCAL_PATH)/audio_extn \
-	$(LOCAL_PATH)/voice_extn
+	$(LOCAL_PATH)/voice_extn \
+	$(LOCAL_PATH)/vendor-platform
 
 ifneq ($(filter msm8974,$(AUDIO_PLATFORM)),)
     LOCAL_C_INCLUDES += external/expat/lib
diff --git a/hal/msm8974/platform.c b/hal/msm8974/platform.c
index 2f83b63..0118134 100644
--- a/hal/msm8974/platform.c
+++ b/hal/msm8974/platform.c
@@ -74,9 +74,6 @@
 #define RETRY_US 500000
 #define MAX_SND_CARD 8
 
-#define SAMPLE_RATE_8KHZ  8000
-#define SAMPLE_RATE_16KHZ 16000
-
 #define AUDIO_PARAMETER_KEY_FLUENCE_TYPE  "fluence"
 #define AUDIO_PARAMETER_KEY_BTSCO         "bt_samplerate"
 #define AUDIO_PARAMETER_KEY_SLOWTALK      "st_enable"
@@ -93,36 +90,6 @@ struct audio_block_header
     int length;
 };
 
-/* Audio calibration related functions */
-typedef void (*acdb_deallocate_t)();
-typedef int  (*acdb_init_t)();
-typedef void (*acdb_send_audio_cal_t)(int, int);
-typedef void (*acdb_send_voice_cal_t)(int, int);
-typedef int (*acdb_reload_vocvoltable_t)(int);
-
-struct platform_data {
-    struct audio_device *adev;
-    bool fluence_in_spkr_mode;
-    bool fluence_in_voice_call;
-    bool fluence_in_voice_rec;
-    bool fluence_in_audio_rec;
-    int  fluence_type;
-    char fluence_cap[PROPERTY_VALUE_MAX];
-    int  btsco_sample_rate;
-    bool slowtalk;
-    /* Audio calibration related functions */
-    void                       *acdb_handle;
-    int                        voice_feature_set;
-    acdb_init_t                acdb_init;
-    acdb_deallocate_t          acdb_deallocate;
-    acdb_send_audio_cal_t      acdb_send_audio_cal;
-    acdb_send_voice_cal_t      acdb_send_voice_cal;
-    acdb_reload_vocvoltable_t  acdb_reload_vocvoltable;
-
-    void *hw_info;
-    struct csd_data *csd;
-};
-
 static const int pcm_device_table[AUDIO_USECASE_MAX][2] = {
     [USECASE_AUDIO_PLAYBACK_DEEP_BUFFER] = {DEEP_BUFFER_PCM_DEVICE,
                                             DEEP_BUFFER_PCM_DEVICE},
@@ -168,7 +135,7 @@ static const int pcm_device_table[AUDIO_USECASE_MAX][2] = {
 };
 
 /* Array to store sound devices */
-static const char * const device_table[SND_DEVICE_MAX] = {
+static char * device_table[SND_DEVICE_MAX] = {
     [SND_DEVICE_NONE] = "none",
     /* Playback sound devices */
     [SND_DEVICE_OUT_HANDSET] = "handset",
@@ -318,7 +285,7 @@ static int acdb_device_table[SND_DEVICE_MAX] = {
 #define DEEP_BUFFER_PLATFORM_DELAY (29*1000LL)
 #define LOW_LATENCY_PLATFORM_DELAY (13*1000LL)
 
-static int set_echo_reference(struct mixer *mixer, const char* ec_ref)
+int set_echo_reference(struct mixer *mixer, const char* ec_ref)
 {
     struct mixer_ctl *ctl;
     const char *mixer_ctl_name = "EC_REF_RX";
@@ -459,6 +426,7 @@ void close_csd_client(struct csd_data *csd)
 
 void *platform_init(struct audio_device *adev)
 {
+    custom_init_data();
     char platform[PROPERTY_VALUE_MAX];
     char baseband[PROPERTY_VALUE_MAX];
     char value[PROPERTY_VALUE_MAX];
@@ -1096,6 +1064,11 @@ exit:
 
 snd_device_t platform_get_input_snd_device(void *platform, audio_devices_t out_device)
 {
+    snd_device_t customdata = custom_platform_get_input_snd_device(platform, out_device);
+    if (customdata!=-2) {
+        ALOGE("entering custom CM abstraction");
+        return customdata;
+    }
     struct platform_data *my_data = (struct platform_data *)platform;
     struct audio_device *adev = my_data->adev;
     audio_source_t  source = (adev->active_input == NULL) ?
@@ -1731,3 +1704,13 @@ uint32_t platform_get_pcm_offload_buffer_size(audio_offload_info_t* info)
     return fragment_size;
 }
 
+void change_acdb_data(int key, int value){
+    //ALOGE("%s: shareefdebug :%d", "acdb_device_table[key]",  acdb_device_table[key]);
+    acdb_device_table[key]=value;
+    // ALOGE("%s: shareefdebug :%d", "acdb_device_table[key]",  acdb_device_table[key]);
+}
+void change_table_data(int key, char value[]){
+    //ALOGE("%s: shareefdebug :%s", "device_table[key]", device_table[key]);
+    device_table[key] = value;
+    //ALOGE("%s: shareefdebug :%s", "device_table[key]", device_table[key]);
+}
diff --git a/hal/msm8974/platform.h b/hal/msm8974/platform.h
index 7ade575..960baa2 100755
--- a/hal/msm8974/platform.h
+++ b/hal/msm8974/platform.h
@@ -19,6 +19,8 @@
 
 #ifndef QCOM_AUDIO_PLATFORM_H
 #define QCOM_AUDIO_PLATFORM_H
+#include "vendor-platform/Custom-Platform_Api.h"
+#include <cutils/properties.h>
 
 enum {
     FLUENCE_NONE,
@@ -263,5 +265,40 @@ struct csd_data {
     start_record_t start_record;
     stop_record_t stop_record;
 };
+//taken from platform.c
+
+/* Audio calibration related functions */
+typedef void (*acdb_deallocate_t)();
+typedef int  (*acdb_init_t)();
+typedef void (*acdb_send_audio_cal_t)(int, int);
+typedef void (*acdb_send_voice_cal_t)(int, int);
+typedef int (*acdb_reload_vocvoltable_t)(int);
+
+struct platform_data {
+    struct audio_device *adev;
+    bool fluence_in_spkr_mode;
+    bool fluence_in_voice_call;
+    bool fluence_in_voice_rec;
+    bool fluence_in_audio_rec;
+    int  fluence_type;
+    char fluence_cap[PROPERTY_VALUE_MAX];
+    int  btsco_sample_rate;
+    bool slowtalk;
+    /* Audio calibration related functions */
+    void                       *acdb_handle;
+    int                        voice_feature_set;
+    acdb_init_t                acdb_init;
+    acdb_deallocate_t          acdb_deallocate;
+    acdb_send_audio_cal_t      acdb_send_audio_cal;
+    acdb_send_voice_cal_t      acdb_send_voice_cal;
+    acdb_reload_vocvoltable_t  acdb_reload_vocvoltable;
+
+    void *hw_info;
+    struct csd_data *csd;
+};/* Audio calibration related functions */
+#define SAMPLE_RATE_8KHZ  8000
+#define SAMPLE_RATE_16KHZ 16000
+int set_echo_reference(struct mixer *mixer, const char* ec_ref);
+
 
 #endif // QCOM_AUDIO_PLATFORM_H
diff --git a/hal/vendor-platform/Custom-Platform_Api.h b/hal/vendor-platform/Custom-Platform_Api.h
new file mode 100644
index 0000000..e3826e2
--- /dev/null
+++ b/hal/vendor-platform/Custom-Platform_Api.h
@@ -0,0 +1,29 @@
+/*
+ * Copyright 2013, The CyanogenMod Project
+ *   Shareef Ali
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef QCOM_AUDIO_PLATFORM_API_H_Cus
+#define QCOM_AUDIO_PLATFORM_API_H_Cus
+#include <pthread.h>
+#include <audio_hw.h>
+
+snd_device_t custom_platform_get_input_snd_device(void *platform, audio_devices_t out_device);
+
+void custom_init_data();
+void change_acdb_data(int key, int value);
+void change_table_data(int key, char value[]);
+
+#endif // QCOM_AUDIO_PLATFORM_API_H
diff --git a/hal/vendor-platform/customplatform.c b/hal/vendor-platform/customplatform.c
new file mode 100644
index 0000000..a75f16e
--- /dev/null
+++ b/hal/vendor-platform/customplatform.c
@@ -0,0 +1,25 @@
+/*
+ * Copyright 2013, The CyanogenMod Project
+ *   Shareef Ali
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "Custom-Platform_Api.h"
+#include <pthread.h>
+#include <audio_hw.h>
+
+snd_device_t custom_platform_get_input_snd_device(void *platform, audio_devices_t out_device){
+    return -2;
+}
+void custom_init_data(){return;}
-- 
1.7.9.5

